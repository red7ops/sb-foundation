AWSTemplateFormatVersion: '2010-09-09'
Description: 'Operations: Alerts and permissions'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Alert Parameters'
      Parameters:
      - FallbackEmail
    - Label:
        default: 'Bucket Parameters'
      Parameters:
      - ArtifactStoreS3
Parameters:
  FallbackEmail:
    Description: '(Optional) Email address that will receive message if alerts can not be delivered'
    Type: String
    Default: ''
  ArtifactStoreS3:
    Description: 'Name of artifact bucket'
    Type: String
Conditions:
  HasFallbackEmail: !Not [!Equals [!Ref FallbackEmail, '']]
Resources:
  Topic:
    Type: 'AWS::SNS::Topic'
    Properties: {}
  TopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: Id1
        Version: '2012-10-17'
        Statement:
        - Sid: Sid1
          Effect: Allow
          Principal:
            Service:
            - 'events.amazonaws.com' # Allow CloudWatch Events
            - 'budgets.amazonaws.com' # Allow Budget Notifications
            - 'rds.amazonaws.com' # Allow RDS Events
            - 's3.amazonaws.com' # Allow S3 Event Notifications
          Action: 'sns:Publish'
          Resource: !Ref Topic
        - Sid: Sid2
          Effect: Allow
          Principal:
            AWS: '*' # Allow CloudWatch Alarms, ElastiCache Notifications, Elastic Beanstalk Notifications, Auto Scaling Notification
          Action: 'sns:Publish'
          Resource: !Ref Topic
          Condition:
            StringEquals:
              'AWS:SourceOwner': !Ref 'AWS::AccountId'
        - Sid: Sid3
          Effect: Allow
          Principal:
            Service: 'ses.amazonaws.com' # Allow SES Notifications & Events
          Action: 'sns:Publish'
          Resource: !Ref Topic
          Condition:
            StringEquals:
              'AWS:Referer': !Ref 'AWS::AccountId'
      Topics:
      - !Ref Topic
  FallbackTopic:
    Type: 'AWS::SNS::Topic'
    Properties: {}
  NumberOfNotificationsFailedTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Alerts could not be delivered'
      Namespace: 'AWS/SNS'
      MetricName: NumberOfNotificationsFailed
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Ref FallbackTopic
      Dimensions:
      - Name: TopicName
        Value: !GetAtt Topic.TopicName
  FallbackEmailSubscription:
    Condition: HasFallbackEmail
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !Ref FallbackEmail
      Protocol: email
      TopicArn: !Ref FallbackTopic
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-CodePipelineRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: "Allow"
          Principal:
            Service:
            - "codepipeline.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: /
      Policies:
      -
        PolicyName: "CodePipelineNestedCFNAccessPolicy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          -
            Effect: "Allow"
            Action:
            - "s3:DeleteObject"
            - "s3:GetBucketVersioning"
            - "s3:GetObject"
            - "s3:GetObjectVersion"
            - "s3:ListBucket"
            - "s3:PutObject"
            - "s3:GetBucketPolicy"
            Resource:
            - !Sub 'arn:aws:s3:::${ArtifactStoreS3}'
            - !Sub 'arn:aws:s3:::${ArtifactStoreS3}/*'
            - !Sub 'arn:aws:s3:::r7-*'
            - !Sub 'arn:aws:s3:::r7-*/*'
          -
            Effect: "Allow"
            Action:
            - "sns:Publish"
            Resource:
            - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*'
          -
            Effect: "Allow"
            Action:
            - "codecommit:ListBranches"
            - "codecommit:ListRepositories"
            - "codecommit:BatchGetRepositories"
            - "codecommit:Get*"
            - "codecommit:GitPull"
            - "codecommit:UploadArchive"
            Resource:
            - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:sb-*'
            - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:sb2-*'
            - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:bb-*'
            - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:ob-*'
            - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:r7-*'
          -
            Effect: "Allow"
            Action:
            - "cloudformation:CreateChangeSet"
            - "cloudformation:CreateStack"
            - "cloudformation:CreateUploadBucket"
            - "cloudformation:DeleteChangeSet"
            - "cloudformation:DeleteStack"
            - "cloudformation:Describe*"
            - "cloudformation:List*"
            - "cloudformation:UpdateStack"
            - "cloudformation:ValidateTemplate"
            - "cloudformation:ExecuteChangeSet"
            Resource:
            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/SB-*'
            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/BB-*'
            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/OB-*'
            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/R7-*'
          -
            Effect: "Allow"
            Action:
            - "codebuild:StartBuild"
            - "codebuild:BatchGetBuilds"
            Resource:
            - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/SB-*'
            - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/SB-*:*'
            - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/BB-*'
            - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/BB-*:*'
            - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/OB-*'
            - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/OB-*:*'
            - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/R7-*'
            - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/R7-*:*'
          -
            Effect: "Allow"
            Action:
            - "iam:PassRole"
            Resource:
            - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-CloudFormationRole'
            - !Sub 'arn:aws:iam::${AWS::AccountId}:role/service-role/${AWS::StackName}-CloudFormationRole'
            - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-ECSRole'
  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-CodeBuildRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: "Allow"
          Principal:
            Service:
            - "codebuild.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: /service-role/
      Policies:
      -
        PolicyName: "CodeBuildNestedCFNAccessPolicy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          -
            Effect: "Allow"
            Action:
            - "ec2:Describe*"
            - "cloudformation:ValidateTemplate"
            - "elasticloadbalancing:Describe*"
            - "autoscaling:Describe*"
            - "iam:Get*"
            - "iam:List*"
            - "logs:Describe*"
            - "logs:Get*"
            - "tag:Get*"
            - "ssm:GetParameters"
            - "ecr:GetAuthorizationToken"
            - "ecr:BatchCheckLayerAvailability"
            - "ecr:GetDownloadUrlForLayer"
            - "ecr:GetRepositoryPolicy"
            - "ecr:DescribeRepositories"
            - "ecr:ListImages"
            - "ecr:DescribeImages"
            - "ecr:BatchGetImage"
            - "ecr:InitiateLayerUpload"
            - "ecr:UploadLayerPart"
            - "ecr:CompleteLayerUpload"
            - "ecr:PutImage"
            Resource:
            - "*"
          -
            Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource:
            - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
          -
            Effect: "Allow"
            Action:
            - "s3:PutObject"
            - "s3:GetObject"
            - "s3:GetObjectVersion"
            - "s3:ListBucket"
            Resource:
            - !Sub 'arn:aws:s3:::codepipeline-${AWS::Region}-*'
            - !Sub 'arn:aws:s3:::${ArtifactStoreS3}/*'
            - !Sub 'arn:aws:s3:::${ArtifactStoreS3}'
            - !Sub 'arn:aws:s3:::r7-*-cdn/*'
            - !Sub 'arn:aws:s3:::r7-*-cdn'
          -
            Effect: "Allow"
            Action:
            - "codecommit:BatchGet*"
            - "codecommit:Get*"
            - "codecommit:List*"
            - "codecommit:Describe*"
            - "codecommit:Put*"
            - "codecommit:Post*"
            - "codecommit:Merge*"
            - "codecommit:Test*"
            - "codecommit:Update*"
            - "codecommit:GitPull"
            - "codecommit:GitPush"
            Resource:
            - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:sb-*'
            - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:sb2-*'
            - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:r7-*'
  CloudFormationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-CloudFormationRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: "Allow"
          Principal:
            Service:
            - "cloudformation.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: /service-role/
      Policies:
      -
        PolicyName: "CloudFormationNestedCFNAccessPolicy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "iam:AddRoleToInstanceProfile"
            - "iam:AttachRolePolicy"
            - "iam:CreateInstanceProfile"
            - "iam:CreatePolicy"
            - "iam:CreateRole"
            - "iam:CreateServiceLinkedRole"
            - "iam:DeleteInstanceProfile"
            - "iam:DeletePolicy"
            - "iam:DeleteRole"
            - "iam:DeleteRolePolicy"
            - "iam:DetachRolePolicy"
            - "iam:GetInstanceProfile"
            - "iam:GetPolicy"
            - "iam:GetRole"
            - "iam:GetRolePolicy"
            - "iam:ListAttachedRolePolicies"
            - "iam:ListInstanceProfiles"
            - "iam:ListInstanceProfilesForRole"
            - "iam:ListRolePolicies"
            - "iam:ListRoles"
            - "iam:ListServerCertificates"
            - "iam:PassRole"
            - "iam:PutRolePolicy"
            - "iam:RemoveRoleFromInstanceProfile"
            Resource:
            - !Sub 'arn:aws:iam::${AWS::AccountId}:role/SB-*'
          - Effect: "Allow"
            Action:
#            - "ec2:AllocateAddress"
#            - "ec2:Describe*"
#            - "ec2:CreateNetworkInterface"
#            - "ec2:CreateSecurityGroup"
#            - "ec2:DeleteNetworkInterface"
#            - "ec2:ModifyInstanceAttribute"
#            - "ec2:ModifyNetworkInterfaceAttribute"
#            - "ec2:ReleaseAddress"
#            - "ec2:AuthorizeSecurityGroupIngress"
#            - "ec2:DeleteSecurityGroup"
#            - "ec2:CreateTags"
            - "ec2:*"
            - "ecs:*"
            - "autoscaling:Describe*"
            - "elasticloadbalancing:AddTags"
            - "elasticloadbalancing:Describe*"
            - "elasticloadbalancing:CreateListener"
            - "elasticloadbalancing:CreateLoadBalancer"
            - "elasticloadbalancing:CreateRule"
            - "elasticloadbalancing:CreateTargetGroup"
            - "elasticloadbalancing:DeleteTargetGroup"
            - "elasticloadbalancing:DeleteLoadBalancer"
            - "elasticloadbalancing:DeleteListener"
            - "elasticloadbalancing:DeleteRule"
            - "elasticloadbalancing:ModifyTargetGroup"
            - "elasticloadbalancing:ModifyTargetGroupAttributes"
            - "elasticloadbalancing:ModifyLoadBalancerAttributes"
            - "elasticloadbalancing:ModifyListener"
            - "elasticloadbalancing:ModifyRule"
            - "elasticloadbalancing:SetRulePriorities"
            - "autoscaling:CreateAutoScalingGroup"
            - "autoscaling:CreateLaunchConfiguration"
            - "autoscaling:DeletePolicy"
            - "application-autoscaling:RegisterScalableTarget"
            - "application-autoscaling:DescribeScalableTargets"
            - "application-autoscaling:DeregisterScalableTarget"
            - "application-autoscaling:PutScalingPolicy"
            - "application-autoscaling:DescribeScalingPolicies"
            - "application-autoscaling:DescribeScalingActivities"
            - "application-autoscaling:DeleteScalingPolicy"
            - "application-autoscaling:DescribeScheduledActions"
            - "cloudwatch:DeleteAlarms"
            - "cloudwatch:DescribeAlarms"
            - "cloudwatch:DescribeAlarmsForMetric"
            - "cloudwatch:GetMetricStatistics"
            - "cloudwatch:ListMetrics"
            - "cloudwatch:PutMetricAlarm"
            - "cloudwatch:PutMetricData"
            - "ssm:DescribeParameters"
            - "logs:*"
            - "rds:DescribeEngineDefaultParameters"
            - "route53:GetChange"
            - "route53:GetHostedZone"
            - "route53:ListResourceRecordSets"
            - "elasticache:*"
            - "lambda:*"
            - "events:*"
            - "elasticfilesystem:*"
            - "cloudfront:*"
            Resource:
            - "*"
          - Effect: "Allow"
            Action:
            - "s3:GetObject"
            - "s3:ListBucket"
            Resource:
            - !Sub 'arn:aws:s3:::${ArtifactStoreS3}'
            - !Sub 'arn:aws:s3:::${ArtifactStoreS3}/*'
            - !Sub 'arn:aws:s3:::r7-*'
            - !Sub 'arn:aws:s3:::r7-*/*'

  ECSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-ECSRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: "Allow"
          Principal:
            Service:
            - "ecs.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: /
      Policies:
      -
        PolicyName: "ECSAccessPolicy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          -
            Effect: "Allow"
            Action:
            - "ec2:AuthorizeSecurityGroupIngress"
            - "ec2:Describe*"
            - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
            - "elasticloadbalancing:Describe*"
            - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            - "elasticloadbalancing:DeregisterTargets"
            - "elasticloadbalancing:RegisterTargets"
            - "ecs:RegisterTaskDefinition"
            - "ecs:ListTaskDefinitions"
            - "ecs:DescribeTaskDefinition"
            - "s3:ListBucket"
            - "s3:GetObject"
            Resource:
            - "*"
Outputs:
  TopicARN:
    Description: 'The ARN of the alert topic.'
    Value: !Ref Topic
    Export:
      Name: !Sub '${AWS::StackName}-TopicARN'
  CodePipelineRoleARN:
    Description: 'The ARN of the CodePipeline role'
    Value: !GetAtt CodePipelineRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CodePipelineRoleARN'
  CodeBuildRoleARN:
    Description: 'The ARN of the CodeBuild role'
    Value: !GetAtt CodeBuildRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CodeBuildRoleARN'
  CloudFormationRoleARN:
    Description: 'The ARN of the CloudFormation role'
    Value: !GetAtt CloudFormationRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CloudFormationRoleARN'
  ECSRoleARN:
    Description: 'The ARN of the ECS role'
    Value: !GetAtt ECSRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ECSRoleARN'
