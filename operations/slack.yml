AWSTemplateFormatVersion: '2010-09-09'
Description: 'Operations: Slack interface'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Slack Parameters'
      Parameters:
      - SlackEndpoint
    - Label:
        default: 'Dependency Parameters'
      Parameters:
      - LambdaLocation
      - LambdaStoreS3
      - ParentAlertStack
Parameters:
  ParentAlertStack:
    Description: 'Name of parent alert stack (OpSec)'
    Type: String
  SlackEndpoint:
    Description: 'Custom endpoint for slack notifications.'
    Type: String
  LambdaStoreS3:
    Description: 'Name of script bucket'
    Type: String
  LambdaLocation:
    Description: 'Location of script in bucket'
    Type: String
Resources:
  SlackExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-SlackExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "logs:*"
            Resource: "arn:aws:logs:*:*:*"
  DeployerExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-DeployerExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "logs:*"
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
            - "lambda:UpdateFunctionCode"
            Resource:
            - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
          - Effect: Allow
            Action:
            - "s3:Get*"
            - "s3:List*"
            Resource:
            - !Sub "arn:aws:s3:::${LambdaStoreS3}/*"
  LambdaEndpointSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt SnsToSlack.Arn
      Protocol: lambda
      TopicArn:
        'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
  SnsToSlack:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Timeout: 15
      TracingConfig:
        Mode: PassThrough
      Role: !GetAtt SlackExecutionRole.Arn
      Runtime: nodejs6.10
      Environment:
        Variables:
          SlackHost: 'hooks.slack.com'
          SlackPath: !Sub '/services/${SlackEndpoint}'
      Code:
        S3Bucket: !Ref LambdaStoreS3
        S3Key: !Ref LambdaLocation
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      FunctionName: !GetAtt SnsToSlack.Arn
  LambdaDeployer:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Timeout: 15
      TracingConfig:
        Mode: PassThrough
      Role: !GetAtt DeployerExecutionRole.Arn
      Runtime: nodejs6.10
      Code:
        ZipFile: !Sub |
          var AWS = require('aws-sdk');
          var lambda = new AWS.Lambda();
          exports.handler = function(event, context, callback) {
              var key, bucket, version;
              key = event.Records[0].s3.object.key
              bucket = event.Records[0].s3.bucket.name
              version = event.Records[0].s3.object.versionId
              if (bucket == "${LambdaStoreS3}" && key == "${LambdaLocation}" && version) {
                  var functionName = "${SnsToSlack}";
                  console.log("uploaded to lambda function: " + functionName);
                  var params = {
                      FunctionName: functionName,
                      S3Key: key,
                      S3Bucket: bucket,
                      S3ObjectVersion: version
                  };
                  lambda.updateFunctionCode(params, function(err, data) {
                      if (err) {
                          console.log(err, err.stack);
                          callback(err);
                      } else {
                          console.log(data);
                          callback(null, data);
                      }
                  });
              } else {
                  callback(null, "skipping zip " + key + " in bucket " + bucket + " with version " + version);
              }
            };
#  LambdaDeployerInvokePermission:
#    Type: 'AWS::Lambda::Permission'
#    Properties:
#      Action: lambda:InvokeFunction
#      Principal: s3.amazonaws.com
#      SourceArn: !Sub 'arn:aws:s3:::${LambdaStoreS3}'
#      FunctionName: !GetAtt SnsToSlack.Arn

Outputs:
  Pipeline:
    Description: URL of slack.
    Value: !Sub 'https://red7sportstech.slack.com'
