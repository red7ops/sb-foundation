AWSTemplateFormatVersion: ''
Description: ''
Parameters:

Resources:
  StorageSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'NPM registry security'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref MasterSG
        FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
  StorageSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      FileSystemTags:
      - Key: Name
        Value: 'npm-registry-storage'
      PerformanceMode: generalPurpose
  StoragePercentIOLimitTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average IO utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EFS'
      MetricName: PercentIOLimit
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: FileSystemId
        Value: !Ref StorageSystem
  StorageBurstCreditBalanceTooLowAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'EFS file system is running out of burst credits. You can expect a significant performance drop in the next hour.'
      Namespace: 'AWS/EFS'
      MetricName: BurstCreditBalance
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: LessThanThreshold
      Threshold: 192416666667 # 192 GB in Bytes (last hour where you can burst at 100 MB/sec)
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: FileSystemId
        Value: !Ref StorageSystem
  StorageMountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref MasterStorage
      SecurityGroups:
      - !Ref MasterStorageSG
      SubnetId: !Ref PrivateSubnetA
  StorageMountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref MasterStorage
      SecurityGroups:
      - !Ref MasterStorageSG
      SubnetId: !Ref PrivateSubnetB
  ELBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Registry ELB'
      VpcId: !Ref VpcId
  ELBSGInWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: 'HTTP access'
      GroupId: !Ref MasterELBSG
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: '0.0.0.0/0'
  HTTPCodeELB5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer returns 5XX HTTP status codes'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_ELB_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt MasterELB.LoadBalancerFullName
  HTTPCodeTarget5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer receives 5XX HTTP status codes from targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt MasterELB.LoadBalancerFullName
  RejectedConnectionCountTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer rejected connections because the load balancer had reached its maximum number of connections'
      Namespace: 'AWS/ApplicationELB'
      MetricName: RejectedConnectionCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt MasterELB.LoadBalancerFullName
  TargetConnectionErrorCountTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer could not connect to targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: TargetConnectionErrorCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt MasterELB.LoadBalancerFullName
  RecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        HostedZoneId: !GetAtt 'MasterELB.CanonicalHostedZoneID'
        DNSName: !GetAtt 'MasterELB.DNSName'
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub '${SubDomainName}.${HostedZoneName}'
      Type: A
  ELB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - !Ref MasterELBSG
      Subnets:
      - !Ref PublicSubnetA
      - !Ref PublicSubnetB
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-master'
  ELBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/login'
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 25
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 8080
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: 'jenkins-master'
      VpcId: !Ref VpcId
      TargetGroupAttributes:
      - Key: 'deregistration_delay.timeout_seconds'
        Value: 30
  ELBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref MasterELBTargetGroup
        Type: forward
      LoadBalancerArn: !Ref MasterELB
      Port: 80
      Protocol: HTTP


#  SG:
#    Type: 'AWS::EC2::SecurityGroup'
#    Properties:
#      GroupDescription: 'jenkins-master'
#      VpcId: !Ref VpcId
#      SecurityGroupIngress:
#      - SourceSecurityGroupId: !Ref MasterELBSG
#        FromPort: 8080
#        ToPort: 8080
#        IpProtocol: tcp
#      - SourceSecurityGroupId: !Ref AgentSG
#        FromPort: 8080
#        ToPort: 8080
#        IpProtocol: tcp
#      - SourceSecurityGroupId: !Ref AgentSG
#        FromPort: 49817
#        ToPort: 49817
#        IpProtocol: tcp
  SGInSSHBastion:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref MasterSG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'
  SGInSSHWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasNotSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref MasterSG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: '0.0.0.0/0'
  Logs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref MasterLogsRetentionInDays
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
          update:
        setup:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets update
                runas=root
              mode: '000400'
              owner: root
              group: root
            '/lib/systemd/system/cfn-hup.service':
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
              mode: '000400'
              owner: root
              group: root
          commands:
            01_enable_cfn_hup:
              command: 'systemctl enable cfn-hup.service'
            02_start_cfn_hup:
              command: 'systemctl start cfn-hup.service'
        cloudwatch:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ]
                      }
                    }
                  }
                }
# TODO config on ssm?
          commands:
            '01_stop_service':
              command: '/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop'
            '02_start_service':
              command: '/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s'
        mount:
          packages:
            yum:
              'nfs-utils': []
            rubygems:
              'aws-sdk':
              - '3.0.1'
              daemons:
              - '1.2.4'
          commands:
            '01_groupadd':
              command: 'groupadd -g 497 verdaccio'
              test: 'if grep -q verdaccio: /etc/group; then exit 1; else exit 0; fi'
            '02_useradd':
              command: 'adduser -u 498 -g 497 -s /bin/false -d /var/lib/verdaccio -c ''Verdaccio NPM Registry'' verdaccio'
              test: 'if grep -q verdaccio: /etc/passwd; then exit 1; else exit 0; fi'
            '03_mountpoint_mkdir':
              command: 'mkdir /var/lib/verdaccio && chown -R verdaccio:verdaccio /var/lib/verdaccio'
              test: '[ ! -d /var/lib/verdaccio ]'
            '04_mountpoint_mount':
              command: !Sub 'while ! nc -z ${Storage}.efs.${AWS::Region}.amazonaws.com 2049; do sleep 10; done && sleep 10 && mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 "${Storage}.efs.${AWS::Region}.amazonaws.com:/" /var/lib/verdaccio'
              test: 'if mount | grep -q /var/lib/verdaccio; then exit 1; else exit 0; fi'
        cron:

    Properties:
      ImageId: !Ref InstanceAmi
      IamInstanceProfile: !Ref MasterIP
      InstanceType: !Ref MasterInstanceType
      SecurityGroups:
      - !Ref MasterSG
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      BlockDeviceMappings:
      - DeviceName: '/dev/xvda'
        Ebs:
          VolumeSize: !Ref MasterVolumeSize
          VolumeType: gp2
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
