AWSTemplateFormatVersion: '2010-09-09'
Description: 'Jenkins 2: highly available Jenkins master and dynamic agents'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentSSHBastionStack
      - ParentAlertStack
    - Label:
        default: 'Jenkins Parameters'
      Parameters:
      - JenkinsVersion
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - SubDomainName
      - VpcId
    - Label:
        default: 'Master Parameters'
      Parameters:
      - MasterInstanceType
      - MasterAdminPassword
      - MasterLogsRetentionInDays
      - MasterVolumeSize
    - Label:
        default: 'Agent Parameters'
      Parameters:
      - AgentSubnetsReach
      - AgentInstanceType
      - AgentVolumeSize
      - AgentMaxSize
      - AgentMinSize
      - AgentDesiredCapacity
      - AgentMaxBuildWaitTimeInSeconds
      - AgentLogsRetentionInDays
Parameters:
  ParentSSHBastionStack:
    Description: 'Optional but recommended stack name of parent SSH bastion host/instance stack based on vpc/vpc-ssh-bastion.yaml template.'
    Type: String
    Default: ''
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  VpcId:
    Description: 'Id of Vpc.'
    Type: AWS::EC2::VPC::Id
  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the Jenkins master and agents.'
    Type: String
    Default: ''
  MasterInstanceType:
    Description: 'The instance type of the Jenkins master.'
    Type: String
    Default: 't2.micro'
  MasterAdminPassword:
    Description: 'A password for the Jenkins master admin. MUST NOT BE CHANGED!'
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 32
  MasterLogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  MasterVolumeSize:
    Description: 'The root volume size, in Gibibytes (GiB). Keep in mind that Jenkins home lives on EFS.'
    Type: Number
    Default: 8
    ConstraintDescription: 'Must be in the range [8-1024]'
    MinValue: 8
    MaxValue: 1024
  AgentSubnetsReach:
    Description: 'Should the agents have direct access to the Internet or do you prefer private subnets with NAT?'
    Type: String
    Default: Public
    AllowedValues:
    - Public
    - Private
  AgentInstanceType:
    Description: 'The instance type of the Jenkins agents.'
    Type: String
    Default: 't2.micro'
  AgentVolumeSize:
    Description: 'The root volume size, in Gibibytes (GiB).  Keep in mind that Jenkins home lives on EFS.'
    Type: Number
    Default: 8
    ConstraintDescription: 'Must be in the range [8-1024]'
    MinValue: 8
    MaxValue: 1024
  AgentMaxSize:
    Description: 'The maximum size of the agents Auto Scaling group.'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  AgentMinSize:
    Description: 'The minimum size of the agents Auto Scaling group.'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be >= 0'
    MinValue: 0
  AgentDesiredCapacity:
    Description: 'The desired start size of the agents Auto Scaling group.'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be >= 0'
    MinValue: 0
  AgentMaxBuildWaitTimeInSeconds:
    Description: 'Maximum time in seconds an agent can continue with a build although it should be scaled down.'
    Type: Number
    Default: 600
    ConstraintDescription: 'Must be in the range [600-7200]'
    MinValue: 600
    MaxValue: 7200
  AgentLogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  JenkinsVersion:
    Description: 'Jenkins version number'
    Type: String
    Default: '2.107.3'
  SubDomainName:
    Description: 'Name that is used to create the DNS entry ${SubDomainName}.${HostedZoneName}'
    Type: String
    Default: 'jenkins'
Conditions:
  HasZeroAgents: !Equals [!Ref AgentDesiredCapacity, '0']
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasSSHBastionSecurityGroup: !Not [!Equals [!Ref ParentSSHBastionStack, '']]
  HasNotSSHBastionSecurityGroup: !Equals [!Ref ParentSSHBastionStack, '']
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
Resources:
  MasterStorageSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'jenkins-master'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref MasterSG
        FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
  MasterStorage:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      FileSystemTags:
      - Key: Name
        Value: 'jenkins-master-storage'
      PerformanceMode: generalPurpose
  MasterStoragePercentIOLimitTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average IO utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EFS'
      MetricName: PercentIOLimit
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: FileSystemId
        Value: !Ref MasterStorage
  MasterStorageBurstCreditBalanceTooLowAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'EFS file system is running out of burst credits. You can expect a significant performance drop in the next hour.'
      Namespace: 'AWS/EFS'
      MetricName: BurstCreditBalance
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: LessThanThreshold
      Threshold: 192416666667 # 192 GB in Bytes (last hour where you can burst at 100 MB/sec)
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: FileSystemId
        Value: !Ref MasterStorage
  MasterStorageMountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref MasterStorage
      SecurityGroups:
      - !Ref MasterStorageSG
      SubnetId: !Select [ !Ref PrivateSubnets, 0 ]

  MasterStorageMountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref MasterStorage
      SecurityGroups:
      - !Ref MasterStorageSG
      SubnetId: !Select [ !Ref PrivateSubnets, 1 ]
  MasterELBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'jenkins-elb-master'
      VpcId: !Ref VpcId
  MasterELBSGInWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref MasterELBSG
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: '0.0.0.0/0'
  MasterHTTPCodeELB5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer returns 5XX HTTP status codes'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_ELB_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt MasterELB.LoadBalancerFullName
  MasterHTTPCodeTarget5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer receives 5XX HTTP status codes from targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt MasterELB.LoadBalancerFullName
  MasterRejectedConnectionCountTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer rejected connections because the load balancer had reached its maximum number of connections'
      Namespace: 'AWS/ApplicationELB'
      MetricName: RejectedConnectionCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt MasterELB.LoadBalancerFullName
  MasterTargetConnectionErrorCountTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer could not connect to targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: TargetConnectionErrorCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt MasterELB.LoadBalancerFullName
  RecordSet:
    Condition: HasZone
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        HostedZoneId: !GetAtt 'MasterELB.CanonicalHostedZoneID'
        DNSName: !GetAtt 'MasterELB.DNSName'
      HostedZoneId:
        'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'
      Name: !Sub
      - '${SubDomainName}.${HostedZoneName}'
      - SubDomainName: !Ref SubDomainName
        HostedZoneName:
          'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'
      Type: A
  MasterELB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - !Ref MasterELBSG
      Subnets: !Ref PublicSubnets
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-master'
  MasterELBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/login'
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 25
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 8080
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: 'jenkins-master'
      VpcId: !Ref VpcId
      TargetGroupAttributes:
      - Key: 'deregistration_delay.timeout_seconds'
        Value: 30
  MasterELBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref MasterELBTargetGroup
        Type: forward
      LoadBalancerArn: !Ref MasterELB
      Port: 80
      Protocol: HTTP
  MasterIP:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref MasterIAMRole
  MasterIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: write
            Effect: Allow
            Action: 'cloudwatch:PutMetricData'
            Resource: '*'
      - PolicyName: autoscaling
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: write
            Effect: Allow
            Action: 'autoscaling:CompleteLifecycleAction'
            Resource: '*'
      - PolicyName: sqs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: write
            Effect: Allow
            Action:
            - 'sqs:DeleteMessage'
            - 'sqs:ReceiveMessage'
            Resource: !GetAtt 'AgentTerminatingLifecycleHookQueue.Arn'
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            Resource:
            - 'arn:aws:logs:*:*:*'
      - PolicyName: sts
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'sts:AssumeRole'
            Resource:
            - '*'
  MasterIAMPolicySSHAccess:
    Type: 'AWS::IAM::Policy'
    Condition: HasIAMUserSSHAccess
    Properties:
      Roles:
      - !Ref MasterIAMRole
      PolicyName: iam
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 'iam:ListUsers'
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - 'iam:ListSSHPublicKeys'
          - 'iam:GetSSHPublicKey'
          Resource:
          - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
  MasterSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'jenkins-master'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref MasterELBSG
        FromPort: 8080
        ToPort: 8080
        IpProtocol: tcp
      - SourceSecurityGroupId: !Ref AgentSG
        FromPort: 8080
        ToPort: 8080
        IpProtocol: tcp
      - SourceSecurityGroupId: !Ref AgentSG
        FromPort: 49817
        ToPort: 49817
        IpProtocol: tcp
  MasterSGInSSHBastion:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref MasterSG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'
  MasterSGInSSHWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasNotSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref MasterSG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: '0.0.0.0/0'
  MasterLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref MasterLogsRetentionInDays
  MasterLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default: !If [HasIAMUserSSHAccess, [awslogs, ssh-access, mount, install, setup, custom, run], [awslogs, mount, install, setup, custom, run]]
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${MasterLogs}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${MasterLogs}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${MasterLogs}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${MasterLogs}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${MasterLogs}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${MasterLogs}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${MasterLogs}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${MasterLogs}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${MasterLogs}
                [/var/log/jenkins/jenkins.log]
                datetime_format = %d %b %Y %H:%M:%S
                multi_line_start_pattern = {datetime_format}
                file = /var/log/jenkins/jenkins.log
                log_stream_name = {instance_id}/var/log/jenkins/jenkins.log
                log_group_name = ${MasterLogs}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
        ssh-access:
          files:
            '/opt/authorized_keys_command.sh':
              content: |
                #!/bin/bash -e
                if [ -z "$1" ]; then
                  exit 1
                fi
                UnsaveUserName="$1"
                UnsaveUserName=${UnsaveUserName//".plus."/"+"}
                UnsaveUserName=${UnsaveUserName//".equal."/"="}
                UnsaveUserName=${UnsaveUserName//".comma."/","}
                UnsaveUserName=${UnsaveUserName//".at."/"@"}
                aws iam list-ssh-public-keys --user-name "$UnsaveUserName" --query "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]" --output text | while read -r KeyId; do
                  aws iam get-ssh-public-key --user-name "$UnsaveUserName" --ssh-public-key-id "$KeyId" --encoding SSH --query "SSHPublicKey.SSHPublicKeyBody" --output text
                done
              mode: '000755'
              owner: root
              group: root
            '/opt/import_users.sh':
              content: |
                #!/bin/bash -e
                aws iam list-users --query "Users[].[UserName]" --output text | while read User; do
                  SaveUserName="$User"
                  SaveUserName=${SaveUserName//"+"/".plus."}
                  SaveUserName=${SaveUserName//"="/".equal."}
                  SaveUserName=${SaveUserName//","/".comma."}
                  SaveUserName=${SaveUserName//"@"/".at."}
                  if [ "${#SaveUserName}" -le "32" ]; then
                    if ! id -u "$SaveUserName" >/dev/null 2>&1; then
                      #sudo will read each file in /etc/sudoers.d, skipping file names that end in ‘~’ or contain a ‘.’ character to avoid causing problems with package manager or editor temporary/backup files.
                      SaveUserFileName=$(echo "$SaveUserName" | tr "." " ")
                      /usr/sbin/useradd "$SaveUserName"
                      echo "$SaveUserName ALL=(ALL) NOPASSWD:ALL" > "/etc/sudoers.d/$SaveUserFileName"
                    fi
                  else
                    echo "Can not import IAM user ${SaveUserName}. User name is longer than 32 characters."
                  fi
                done
              mode: '000755'
              owner: root
              group: root
            '/etc/cron.d/import_users':
              content: |
                */10 * * * * root /opt/import_users.sh
              mode: '000644'
              owner: root
              group: root
          commands:
            'a_configure_sshd_command':
              command: 'sed -i "s:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g" /etc/ssh/sshd_config'
            'b_configure_sshd_commanduser':
              command: 'sed -i "s:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g" /etc/ssh/sshd_config'
            'c_import_users':
              command: './import_users.sh'
              cwd: '/opt'
          services:
            sysvinit:
              sshd:
                enabled: true
                ensureRunning: true
                commands:
                - 'a_configure_sshd_command'
                - 'b_configure_sshd_commanduser'
        mount:
          packages:
            yum:
              'nfs-utils': []
            rubygems:
              'aws-sdk':
              - '3.0.1'
              daemons:
              - '1.2.4'
          commands:
            'a_groupadd':
              command: 'groupadd -g 497 jenkins'
              test: 'if grep -q jenkins: /etc/group; then exit 1; else exit 0; fi'
            'b_useradd':
              command: 'adduser -u 498 -g 497 -s /bin/false -d /var/lib/jenkins -c ''Jenkins Continuous Integration Server'' jenkins'
              test: 'if grep -q jenkins: /etc/passwd; then exit 1; else exit 0; fi'
            'c_mountpoint_mkdir':
              command: 'mkdir /var/lib/jenkins && chown -R jenkins:jenkins /var/lib/jenkins'
              test: '[ ! -d /var/lib/jenkins ]'
            'd_mountpoint_mount':
              command: !Sub 'while ! nc -z ${MasterStorage}.efs.${AWS::Region}.amazonaws.com 2049; do sleep 10; done && sleep 10 && mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 "${MasterStorage}.efs.${AWS::Region}.amazonaws.com:/" /var/lib/jenkins'
              test: 'if mount | grep -q /var/lib/jenkins; then exit 1; else exit 0; fi'
        install:
          packages:
            rpm:
              jenkins: !Sub 'https://pkg.jenkins.io/redhat-stable/jenkins-${JenkinsVersion}-1.1.noarch.rpm'
            yum:
              'java-1.8.0-openjdk': []
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.MasterLC.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=MasterLC
                runas=root
            '/etc/init.d/lifecycle-poller':
              content: |
                #!/usr/bin/env ruby
                # chkconfig:    - 80 20
                APP_NAME = 'lifecycle-poller'
                APP_PATH = '/opt/lifecycle-poller/daemon.rb'
                case ARGV.first
                  when 'start'
                    puts "Starting #{APP_NAME}..."
                    system(APP_PATH, 'start')
                    exit($?.exitstatus)
                  when 'stop'
                    system(APP_PATH, 'stop')
                    exit($?.exitstatus)
                  when 'restart'
                    system(APP_PATH, 'restart')
                    exit($?.exitstatus)
                  when 'status'
                    system(APP_PATH, 'status')
                    exit($?.exitstatus)
                end
                unless %w{start stop restart status}.include? ARGV.first
                  puts "Usage: #{APP_NAME} {start|stop|restart|status}"
                  exit(1)
                end
              mode: '000755'
              owner: root
              group: root
            '/opt/lifecycle-poller/poller.conf':
              content: !Sub |
                region: ${AWS::Region}
                queueUrl: ${AgentTerminatingLifecycleHookQueue}
                maxWaitInSeconds: ${AgentMaxBuildWaitTimeInSeconds}
                masterAdminPassword: ${MasterAdminPassword}
              mode: '000400'
              owner: root
              group: root
            '/opt/lifecycle-poller/daemon.rb':
              content: |
                #!/usr/bin/env ruby
                require 'daemons'
                Daemons.run(__dir__ + '/worker.rb', {:monitor => true, :log_output_syslog => true})
              mode: '000500'
              owner: root
              group: root
            '/opt/lifecycle-poller/worker.rb':
              content: |
                #!/usr/bin/env ruby
                require 'net/http'
                require 'aws-sdk'
                require 'json'
                require 'uri'
                require 'yaml'
                require 'syslog/logger'
                $log = Syslog::Logger.new 'poller'
                $conf = YAML::load_file(__dir__ + '/poller.conf')
                Aws.config.update(region: $conf['region'])
                $log.info 'poller started'
                def takeAgentTemporarilyOffline(agent)
                  # sterr is forwarded to sdout to get the information in ruby
                  out=`java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s http://localhost:8080 -auth 'admin:#{$conf['masterAdminPassword']}' offline-node #{agent} -m 'scale down' 2>&1`
                  if $?.exitstatus == 0
                    $log.info "agent #{agent} is marked as offline"
                    return true
                  else
                    if out.include? "ERROR: No such agent"
                      $log.info "agent #{agent} could not be marked as offline, it already is deleted: #{out}"
                      return true
                    else
                      $log.error "agent #{agent} could not be marked as offline: #{out}"
                      return false
                    end
                  end
                end
                def deleteAgent(agent)
                  # sterr is forwarded to sdout to get the information in ruby
                  out=`java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s http://localhost:8080 -auth 'admin:#{$conf['masterAdminPassword']}' delete-node #{agent} 2>&1`
                  if $?.exitstatus == 0
                    $log.info "agent #{agent} is deleted"
                    return true
                  else
                    if out.include? "ERROR: No such node"
                      $log.info "agent #{agent} could not be deleted, it already is deleted: #{out}"
                      return true
                    else
                      $log.error "agent #{agent} could not be deleted: #{out}"
                      return false
                    end
                  end
                end
                def isAgentIdle(agent)
                  url = URI.parse("http://localhost:8080/computer/#{agent}/api/xml")
                  req = Net::HTTP::Get.new(url.to_s)
                  req.basic_auth('admin', $conf['masterAdminPassword'])
                  res = Net::HTTP.start(url.host, url.port) {|http|
                    http.request(req)
                  }
                  if res.code == '200'
                    if res.body.include? '<idle>true</idle>'
                      return true
                    elsif res.body.include? '<idle>false</idle>'
                      return false
                    else
                      $log.error "unexpected body: #{res.body}"
                      return false
                    end
                  elsif res.code == '404'
                    return true
                  else
                    $log.error "unexpected response code: #{res.code}"
                    return false
                  end
                end
                def awaitAgentIdle(agent)
                  endTime = Time.now.to_i + $conf['maxWaitInSeconds']
                  while Time.now.to_i < endTime do
                    if isAgentIdle agent
                      $log.info "agent #{agent} is idle"
                      return true
                    end
                    sleep 5 # seconds
                  end
                  $log.error "agent #{agent} is not idle, but wait time elapsed"
                  return false
                end
                def completeLifecycleAction(token, hook, asg)
                  begin
                    autoscaling = Aws::AutoScaling::Client.new()
                    autoscaling.complete_lifecycle_action(
                      lifecycle_hook_name: hook,
                      auto_scaling_group_name: asg,
                      lifecycle_action_token: token,
                      lifecycle_action_result: 'CONTINUE'
                    )
                    $log.info "Lifecycle action completed"
                    return true
                  rescue Exception => e
                    if e.code == 'ValidationError'
                      $log.info "Lifecycle action failed validation: #{e.inspect}"
                      return true
                    else
                      raise e
                    end
                  end
                end
                def pollSQS()
                  poller = Aws::SQS::QueuePoller.new($conf['queueUrl'])
                  poller.poll do |msg|
                    begin
                      body = JSON.parse(msg.body)
                      $log.debug "message #{body}"
                      if body['Event'] == 'autoscaling:TEST_NOTIFICATION'
                        $log.info 'received test notification'
                      else
                        if body['LifecycleTransition'] == 'autoscaling:EC2_INSTANCE_TERMINATING'
                          $log.info "lifecycle transition for agent #{body['EC2InstanceId']}"
                          takeAgentTemporarilyOffline body['EC2InstanceId']
                          awaitAgentIdle body['EC2InstanceId']
                          deleteAgent body['EC2InstanceId']
                          completeLifecycleAction body['LifecycleActionToken'], body['LifecycleHookName'], body['AutoScalingGroupName']
                        else
                          $log.error "received unsupported lifecycle transition: #{body['LifecycleTransition']}"
                        end
                      end
                    rescue Exception => e
                      $log.error "message failed: #{e.inspect} #{msg.inspect}"
                      raise e
                    end
                  end
                end
                def awaitFile(file)
                  endTime = Time.now.to_i + $conf['maxWaitInSeconds']
                  while Time.now.to_i < endTime do
                    if File.exist? file
                      $log.info "file #{file} exists"
                      return true
                    end
                    sleep 5 # seconds
                  end
                  $log.error "file #{file} is not available, but wait time elapsed"
                  return false
                end
                awaitFile('/var/cache/jenkins/war/WEB-INF/jenkins-cli.jar')
                pollSQS
              mode: '000500'
              owner: root
              group: root
          commands:
            'a_alternatives':
              command: '/usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java'
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
              lifecycle-poller:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/init.d/lifecycle-poller'
                - '/opt/lifecycle-poller/poller.conf'
                - '/opt/lifecycle-poller/daemon.rb'
                - '/opt/lifecycle-poller/worker.rb'
        setup:
          files:
            '/root/plugins.txt':
              content: |
                jqs-monitoring
                ant
                build-timeout
                docker-workflow
                credentials-binding
                email-ext
                envinject
                github-organization-folder
                gradle
                workflow-aggregator
                pipeline-maven
                ssh-slaves
                subversion
                timestamper
                ws-cleanup
                pipeline-aws
                http_request
              mode: '000400'
              owner: root
              group: root
            '/etc/cron.d/cloudwatch-build-active':
              content: !Sub |
                SHELL=/bin/bash
                PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
                MAILTO=root
                HOME=/
                * * * * * root aws --region ${AWS::Region} cloudwatch put-metric-data --namespace ${AWS::StackName} --metric-name BuildActive --value $(curl -s -m 60 -u 'admin:${MasterAdminPassword}' 'http://localhost:8080/computer/api/xml?xpath=*/busyExecutors' | sed -r 's/<[/a-zA-Z]*>//g') --unit Count
              mode: '000600'
              owner: root
              group: root
            '/etc/cron.d/cloudwatch-build-queue':
              content: !Sub |
                SHELL=/bin/bash
                PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
                MAILTO=root
                HOME=/
                * * * * * root aws --region ${AWS::Region} cloudwatch put-metric-data --namespace ${AWS::StackName} --metric-name BuildQueue --value $(curl -s -m 60 -u 'admin:${MasterAdminPassword}' 'http://localhost:8080/jqs-monitoring/api/xml?xpath=/JQSMonitoring/buildQueue/numberOfJobs' | sed -r 's/<[/a-zA-Z]*>//g') --unit Count
              mode: '000600'
              owner: root
              group: root
          commands:
            'a_start_jenkins':
              command: 'service jenkins start'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'b_await_jenkins':
              command: 'until $(curl -s -m 60 -o /dev/null -I -f -u "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" http://localhost:8080/cli/); do printf "."; sleep 1; done'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'c_activate_slave_agent_port':
              command: 'sed -i -e "s@<slaveAgentPort>.*</slaveAgentPort>@<slaveAgentPort>49817</slaveAgentPort>@" /var/lib/jenkins/config.xml'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'd_disable_master_executors':
              command: 'sed -i -e "s@<numExecutors>.*</numExecutors>@<numExecutors>0</numExecutors>@" /var/lib/jenkins/config.xml'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'e_set_label':
              command: 'sed -i -e "s@<label>.*</label>@<label>master</label>@" /var/lib/jenkins/config.xml'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'f_restart_jenkins':
              command: 'service jenkins restart'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'g_await_jenkins':
              command: 'until $(curl -s -m 60 -o /dev/null -I -f -u "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" http://localhost:8080/cli/); do printf "."; sleep 1; done'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'h_install_plugins':
              command: 'java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s "http://localhost:8080/" -auth "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" install-plugin $(cat /root/plugins.txt | tr "\n" " ")'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'i_restart_jenkins':
              command: 'service jenkins restart'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'j_await_jenkins':
              command: 'until $(curl -s -m 60 -o /dev/null -I -f -u "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" http://localhost:8080/cli/); do printf "."; sleep 1; done'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'k_set_admin_password':
              command: !Sub 'echo $''jenkins.model.Jenkins.instance.securityRealm.createAccount("admin", \''${MasterAdminPassword}\'')'' | java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s "http://localhost:8080/" -auth "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" groovy ='
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'l_stop_jenkins':
              command: 'service jenkins stop'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'z_create_setup_done_file':
              command: 'echo "Setup done. Don not delete this file." > /var/lib/jenkins/setup_done.txt'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
        custom:
          packages:
            yum:
              git: []
              docker: []
          commands:
            'a_add_to_docker_group':
              command: 'usermod -a -G docker jenkins'
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - docker
        run:
          services:
            sysvinit:
              jenkins:
                enabled: true
                ensureRunning: true
                packages:
                  rpm:
                  - jenkins
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      IamInstanceProfile: !Ref MasterIP
      InstanceType: !Ref MasterInstanceType
      SecurityGroups:
      - !Ref MasterSG
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      BlockDeviceMappings:
      - DeviceName: '/dev/xvda'
        Ebs:
          VolumeSize: !Ref MasterVolumeSize
          VolumeType: gp2
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MasterLC --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MasterASG --region ${AWS::Region}
  MasterASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn:
    - MasterStorageMountTargetA
    - MasterStorageMountTargetB
    Properties:
      LaunchConfigurationName: !Ref MasterLC
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      HealthCheckGracePeriod: 900
      HealthCheckType: ELB
      NotificationConfigurations: !If
      - HasAlertTopic
      - - NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
          TopicARN:
            'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      - !Ref 'AWS::NoValue'
      VPCZoneIdentifier: !Ref PrivateSubnets
      TargetGroupARNs:
      - !Ref MasterELBTargetGroup
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-master'
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT15M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
        WaitOnResourceSignals: true
  MasterCPUTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Master average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref MasterASG
  AgentELBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/'
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 25
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 8080
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: 'jenkins-agent'
      VpcId: !Ref VpcId
      TargetGroupAttributes:
      - Key: 'deregistration_delay.timeout_seconds'
        Value: 15
  AgentHTTPCodeELB5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer returns 5XX HTTP status codes'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_ELB_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt 'MasterELB.LoadBalancerFullName'
      - Name: TargetGroup
        Value: !GetAtt AgentELBTargetGroup.TargetGroupFullName
  AgentHTTPCodeTarget5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer receives 5XX HTTP status codes from targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt 'MasterELB.LoadBalancerFullName'
      - Name: TargetGroup
        Value: !GetAtt AgentELBTargetGroup.TargetGroupFullName
  AgentRejectedConnectionCountTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer rejected connections because the load balancer had reached its maximum number of connections'
      Namespace: 'AWS/ApplicationELB'
      MetricName: RejectedConnectionCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt 'MasterELB.LoadBalancerFullName'
      - Name: TargetGroup
        Value: !GetAtt AgentELBTargetGroup.TargetGroupFullName
  AgentTargetConnectionErrorCountTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer could not connect to targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: TargetConnectionErrorCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt 'MasterELB.LoadBalancerFullName'
      - Name: TargetGroup
        Value: !GetAtt AgentELBTargetGroup.TargetGroupFullName
  AgentELBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref AgentELBTargetGroup
        Type: forward
      LoadBalancerArn: !Ref MasterELB
      Port: 8080
      Protocol: HTTP
  AgentIP:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref AgentIAMRole
  AgentIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: ec2
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: read
            Effect: Allow
            Action:
            - 'ec2:DescribeInstances'
            - 'autoscaling:DescribeAutoScalingGroups'
            Resource: '*'
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            Resource:
            - arn:aws:logs:*:*:*
      - PolicyName: sts
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'sts:AssumeRole'
            Resource:
            - '*'
  AgentIAMPolicySSHAccess:
    Type: 'AWS::IAM::Policy'
    Condition: HasIAMUserSSHAccess
    Properties:
      Roles:
      - !Ref AgentIAMRole
      PolicyName: iam
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 'iam:ListUsers'
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - 'iam:ListSSHPublicKeys'
          - 'iam:GetSSHPublicKey'
          Resource:
          - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
  AgentSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'jenkins-agent'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref MasterELBSG
        FromPort: 8080
        ToPort: 8080
        IpProtocol: tcp
  AgentSGInSSHBastion:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref AgentSG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'
  AgentSGInSSHWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasNotSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref AgentSG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: '0.0.0.0/0'
  AgentLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref AgentLogsRetentionInDays
  AgentLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default: !If [HasIAMUserSSHAccess, [awslogs, ssh-access, install, setup, custom, run], [awslogs, install, setup, custom, run]]
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${AgentLogs}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${AgentLogs}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${AgentLogs}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${AgentLogs}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${AgentLogs}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${AgentLogs}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${AgentLogs}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${AgentLogs}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${AgentLogs}
                [/var/lib/jenkins/screenlog]
                file = /var/lib/jenkins/screenlog.*
                log_stream_name = {instance_id}/var/lib/jenkins/screenlog
                log_group_name = ${AgentLogs}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
        ssh-access:
          files:
            '/opt/authorized_keys_command.sh':
              content: |
                #!/bin/bash -e
                if [ -z "$1" ]; then
                  exit 1
                fi
                UnsaveUserName="$1"
                UnsaveUserName=${UnsaveUserName//".plus."/"+"}
                UnsaveUserName=${UnsaveUserName//".equal."/"="}
                UnsaveUserName=${UnsaveUserName//".comma."/","}
                UnsaveUserName=${UnsaveUserName//".at."/"@"}
                aws iam list-ssh-public-keys --user-name "$UnsaveUserName" --query "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]" --output text | while read -r KeyId; do
                  aws iam get-ssh-public-key --user-name "$UnsaveUserName" --ssh-public-key-id "$KeyId" --encoding SSH --query "SSHPublicKey.SSHPublicKeyBody" --output text
                done
              mode: '000755'
              owner: root
              group: root
            '/opt/import_users.sh':
              content: |
                #!/bin/bash -e
                aws iam list-users --query "Users[].[UserName]" --output text | while read User; do
                  SaveUserName="$User"
                  SaveUserName=${SaveUserName//"+"/".plus."}
                  SaveUserName=${SaveUserName//"="/".equal."}
                  SaveUserName=${SaveUserName//","/".comma."}
                  SaveUserName=${SaveUserName//"@"/".at."}
                  if [ "${#SaveUserName}" -le "32" ]; then
                    if ! id -u "$SaveUserName" >/dev/null 2>&1; then
                      #sudo will read each file in /etc/sudoers.d, skipping file names that end in ‘~’ or contain a ‘.’ character to avoid causing problems with package manager or editor temporary/backup files.
                      SaveUserFileName=$(echo "$SaveUserName" | tr "." " ")
                      /usr/sbin/useradd "$SaveUserName"
                      echo "$SaveUserName ALL=(ALL) NOPASSWD:ALL" > "/etc/sudoers.d/$SaveUserFileName"
                    fi
                  else
                    echo "Can not import IAM user ${SaveUserName}. User name is longer than 32 characters."
                  fi
                done
              mode: '000755'
              owner: root
              group: root
            '/etc/cron.d/import_users':
              content: |
                */10 * * * * root /opt/import_users.sh
              mode: '000644'
              owner: root
              group: root
          commands:
            'a_configure_sshd_command':
              command: 'sed -i "s:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g" /etc/ssh/sshd_config'
            'b_configure_sshd_commanduser':
              command: 'sed -i "s:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g" /etc/ssh/sshd_config'
            'c_import_users':
              command: './import_users.sh'
              cwd: '/opt'
          services:
            sysvinit:
              sshd:
                enabled: true
                ensureRunning: true
                commands:
                - 'a_configure_sshd_command'
                - 'b_configure_sshd_commanduser'
        install:
          packages:
            yum:
              'java-1.8.0-openjdk': []
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.AgentLC.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=AgentLC
                runas=root
          commands:
            'a_alternatives':
              command: '/usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java'
            'b_groupadd':
              command: 'groupadd -g 497 jenkins'
              test: 'if grep -q jenkins: /etc/group; then exit 1; else exit 0; fi'
            'c_useradd':
              command: 'adduser -u 498 -g 497 -s /bin/bash -d /var/lib/jenkins -c "Jenkins Continuous Integration Server" jenkins'
              test: 'if grep -q jenkins: /etc/passwd; then exit 1; else exit 0; fi'
            'd_mkdir':
              command: 'mkdir /var/lib/jenkins && chown -R jenkins:jenkins /var/lib/jenkins'
              test: '[ ! -d /var/lib/jenkins ]'
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
        setup:
          packages:
            rubygems:
              'aws-sdk':
              - '3.0.1'
              daemons:
              - '1.2.4'
          files:
            '/root/agent.xml':
              content: |
                <?xml version='1.0' encoding='UTF-8'?>
                <slave>
                  <description>AWS Auto Scaling Agent</description>
                  <remoteFS>/tmp</remoteFS>
                  <numExecutors>1</numExecutors>
                  <mode>NORMAL</mode>
                  <retentionStrategy class="hudson.slaves.RetentionStrategy$Always"/>
                  <launcher class="hudson.slaves.JNLPLauncher"/>
                  <label>agent</label>
                  <nodeProperties/>
                </slave>
              mode: '000400'
              owner: root
              group: root
            '/root/check-agent.sh':
              content: !Sub |
                #!/bin/bash -ex
                masterInstanceId=$(aws --region ${AWS::Region} autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${MasterASG} --query 'AutoScalingGroups[0].Instances[0].InstanceId' --output text)
                masterIP=$(aws --region ${AWS::Region} ec2 describe-instances --instance-ids $masterInstanceId --query 'Reservations[0].Instances[0].PrivateIpAddress' --output text)
                java -jar jenkins-cli.jar -s http://$masterIP:8080 -auth 'admin:${MasterAdminPassword}' get-node $(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)
              mode: '000500'
              owner: root
              group: root
            '/root/create-agent.sh':
              content: !Sub |
                #!/bin/bash -ex
                masterInstanceId=$(aws --region ${AWS::Region} autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${MasterASG} --query 'AutoScalingGroups[0].Instances[0].InstanceId' --output text)
                masterIP=$(aws --region ${AWS::Region} ec2 describe-instances --instance-ids $masterInstanceId --query 'Reservations[0].Instances[0].PrivateIpAddress' --output text)
                cat /root/agent.xml | java -jar jenkins-cli.jar -s http://$masterIP:8080 -auth 'admin:${MasterAdminPassword}' create-node $(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)
              mode: '000500'
              owner: root
              group: root
            '/var/lib/jenkins/start-agent.sh':
              content: !Sub |
                #!/bin/bash -ex
                instanceId=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)
                masterInstanceId=$(aws --region ${AWS::Region} autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${MasterASG} --query 'AutoScalingGroups[0].Instances[0].InstanceId' --output text)
                masterIP=$(aws --region ${AWS::Region} ec2 describe-instances --instance-ids $masterInstanceId --query 'Reservations[0].Instances[0].PrivateIpAddress' --output text)
                secret=$(curl -s -m 60 -u 'admin:${MasterAdminPassword}' http://$masterIP:8080/computer/$instanceId/slave-agent.jnlp | xmllint --xpath '//argument[1]/text()' -)
                java -classpath remoting.jar hudson.remoting.jnlp.Main $secret $instanceId -url http://$masterIP:8080/ -headless
              mode: '000500'
              owner: jenkins
              group: jenkins
            '/root/download.sh':
              content: !Sub |
                #!/bin/bash -ex
                masterInstanceId=$(aws --region ${AWS::Region} autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${MasterASG} --query 'AutoScalingGroups[0].Instances[0].InstanceId' --output text)
                masterIP=$(aws --region ${AWS::Region} ec2 describe-instances --instance-ids $masterInstanceId --query 'Reservations[0].Instances[0].PrivateIpAddress' --output text)
                wget -q -T 60 http://$masterIP:8080/jnlpJars/remoting.jar
                wget -q -T 60 http://$masterIP:8080/jnlpJars/jenkins-cli.jar
              mode: '000500'
              owner: root
              group: root
            '/etc/init.d/agent-healthcheck':
              content: |
                #!/usr/bin/env ruby
                # chkconfig:    - 80 20
                APP_NAME = 'agent-healthcheck'
                APP_PATH = '/opt/agent-healthcheck/daemon.rb'
                case ARGV.first
                  when 'start'
                    puts "Starting #{APP_NAME}..."
                    system(APP_PATH, 'start')
                    exit($?.exitstatus)
                  when 'stop'
                    system(APP_PATH, 'stop')
                    exit($?.exitstatus)
                  when 'restart'
                    system(APP_PATH, 'restart')
                    exit($?.exitstatus)
                  when 'status'
                    system(APP_PATH, 'status')
                    exit($?.exitstatus)
                end
                unless %w{start stop restart status}.include? ARGV.first
                  puts "Usage: #{APP_NAME} {start|stop|restart|status}"
                  exit(1)
                end
              mode: '000755'
              owner: root
              group: root
            '/opt/agent-healthcheck/healthcheck.conf':
              content: !Sub |
                region: ${AWS::Region}
                masterASG: ${MasterASG}
                masterAdminPassword: ${MasterAdminPassword}
              mode: '000400'
              owner: root
              group: root
            '/opt/agent-healthcheck/daemon.rb':
              content: |
                #!/usr/bin/env ruby
                require 'daemons'
                Daemons.run(__dir__ + '/server.rb', {:monitor => true, :log_output_syslog => true})
              mode: '000500'
              owner: root
              group: root
            '/opt/agent-healthcheck/server.rb':
              content: |
                #!/usr/bin/env ruby
                require 'net/http'
                require 'aws-sdk'
                require 'yaml'
                require 'webrick'
                require 'syslog/logger'
                $log = Syslog::Logger.new 'healthcheck'
                $conf = YAML::load_file(__dir__ + '/healthcheck.conf')
                Aws.config.update(region: $conf['region'])
                $log.info 'server started'
                $instanceId = `curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id`
                def isHealthy(agent)
                  autoscaling = Aws::AutoScaling::Client.new()
                  ec2 = Aws::EC2::Client.new()
                  resp1 = autoscaling.describe_auto_scaling_groups(
                    auto_scaling_group_names: [$conf['masterASG']]
                  )
                  masterInstanceId = resp1.auto_scaling_groups[0].instances[0].instance_id
                  resp2 = ec2.describe_instances(
                    instance_ids: [masterInstanceId]
                  )
                  masterIP = resp2.reservations[0].instances[0].private_ip_address
                  url = URI.parse("http://#{masterIP}:8080/computer/#{agent}/api/xml")
                  req = Net::HTTP::Get.new(url.to_s)
                  req.basic_auth('admin', $conf['masterAdminPassword'])
                  res = Net::HTTP.start(url.host, url.port) {|http|
                    http.request(req)
                  }
                  if res.code == '200'
                    if res.body.include? '<offline>true</offline>'
                      return false
                    elsif res.body.include? '<offline>false</offline>'
                      return true
                    else
                      $log.error "unexpected body: #{res.body}"
                      return false
                    end
                  else
                    $log.error "unexpected response code: #{res.code}"
                    return false
                  end
                end
                server = WEBrick::HTTPServer.new :Port => 8080
                server.mount_proc '/' do |req, res|
                  if isHealthy($instanceId)
                    res.status = 200
                    res.body = "Healthy"
                  else
                    res.status = 503
                    res.body = "Unhealthy!"
                  end
                end
                server.start
              mode: '000500'
              owner: root
              group: root
          commands:
            'a_download_remoting_jar':
              command: '/root/download.sh'
              cwd: '/var/lib/jenkins'
              test: '[ ! -f /var/lib/jenkins/remoting.jar ]'
            'b_create_agent':
              command: '/root/create-agent.sh'
              cwd: '/var/lib/jenkins'
              test: 'if /root/check-agent.sh; then exit 1; else exit 0; fi'
        custom:
          packages:
            yum:
              git: []
              docker: []
          commands:
            'a_add_to_docker_group':
              command: 'usermod -a -G docker jenkins'
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - docker
        run:
          commands:
            'a_start_agent':
              command: 'su - jenkins -c "screen -m -d -L -S agent /var/lib/jenkins/start-agent.sh"'
              cwd: '/var/lib/jenkins'
              test: 'if su - jenkins -c "screen -ls" | grep -q agent; then exit 1; else exit 0; fi'
          services:
            sysvinit:
              agent-healthcheck:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/init.d/agent-healthcheck'
                - '/opt/agent-healthcheck/healthcheck.conf'
                - '/opt/agent-healthcheck/daemon.rb'
                - '/opt/agent-healthcheck/server.rb'
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      IamInstanceProfile: !Ref AgentIP
      InstanceType: !Ref AgentInstanceType
      SecurityGroups:
      - !Ref AgentSG
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      BlockDeviceMappings:
      - DeviceName: '/dev/xvda'
        Ebs:
          VolumeSize: !Ref AgentVolumeSize
          VolumeType: gp2
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource AgentLC --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AgentASG --region ${AWS::Region}
  AgentASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn: MasterASG
    Properties:
      LaunchConfigurationName: !Ref AgentLC
      MinSize: !Ref AgentMinSize
      MaxSize: !Ref AgentMaxSize
      DesiredCapacity: !Ref AgentDesiredCapacity
      HealthCheckGracePeriod: 600
      HealthCheckType: ELB
      TargetGroupARNs:
      - !Ref AgentELBTargetGroup
      NotificationConfigurations: !If
      - HasAlertTopic
      - - NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
          TopicARN:
            'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      - !Ref 'AWS::NoValue'
      VPCZoneIdentifier: !Ref PrivateSubnets
      Tags:
      - Key: Name
        Value: 'jenkins-agent'
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: !If [HasZeroAgents, 0, 1]
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT10M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
        WaitOnResourceSignals: true
  AgentCPUTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Agent average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AgentASG
  AgentTerminatingLifecycleHookQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub '${AWS::StackName}-terminating-lifecycle-hook'
      VisibilityTimeout: !Ref AgentMaxBuildWaitTimeInSeconds
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt 'AgentTerminatingLifecycleHookDeadLetterQueue.Arn'
        maxReceiveCount: 5
  AgentTerminatingLifecycleHookQueueTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Queue contains messages older than 10 minutes, messages are not consumed'
      Namespace: 'AWS/SQS'
      MetricName: ApproximateAgeOfOldestMessage
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 600
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: QueueName
        Value: !GetAtt 'AgentTerminatingLifecycleHookQueue.QueueName'
  AgentTerminatingLifecycleHookDeadLetterQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub '${AWS::StackName}-terminating-lifecycle-hook-dlq'
  AgentTerminatingLifecycleHookDeadLetterQueueTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Dead letter queue contains messages, message processing failed'
      Namespace: 'AWS/SQS'
      MetricName: ApproximateNumberOfMessagesVisible
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: QueueName
        Value: !GetAtt 'AgentTerminatingLifecycleHookDeadLetterQueue.QueueName'
  AgentTerminatingLifecycleHookIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'autoscaling.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: sqs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: write
            Effect: Allow
            Action:
            - 'sqs:SendMessage'
            - 'sqs:GetQueueUrl'
            Resource: !GetAtt 'AgentTerminatingLifecycleHookQueue.Arn'
  AgentTerminatingLifecycleHook:
    Type: 'AWS::AutoScaling::LifecycleHook'
    Properties:
      HeartbeatTimeout: !Ref AgentMaxBuildWaitTimeInSeconds
      DefaultResult: CONTINUE
      AutoScalingGroupName: !Ref AgentASG
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_TERMINATING'
      NotificationTargetARN: !GetAtt 'AgentTerminatingLifecycleHookQueue.Arn'
      RoleARN: !GetAtt 'AgentTerminatingLifecycleHookIAMRole.Arn'
  AgentScalingUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AgentASG
      Cooldown: 300
      ScalingAdjustment: 1
  BuildQueueHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: 1
      Statistic: Maximum  # special rule because we scale on build queue length
      Threshold: 1
      AlarmDescription: 'Alarm if Build Queue is high.'
      Period: 120
      AlarmActions:
      - !Ref AgentScalingUpPolicy
      Namespace: !Ref 'AWS::StackName'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: BuildQueue
  AgentScalingDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AgentASG
      Cooldown: 300
      ScalingAdjustment: -1
  BuildActiveEmptyAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: 5
      Statistic: Maximum  # special rule because we scale on build queue length
      Threshold: 0
      AlarmDescription: 'Alarm if Build Queue is empty.'
      Period: 120
      AlarmActions:
      - !Ref AgentScalingDownPolicy
      Namespace: !Ref 'AWS::StackName'
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: BuildActive
Outputs:
  TemplateID:
    Description: 'Template id.'
    Value: 'jenkins/jenkins2-ha-agents'
  TemplateVersion:
    Description: 'Template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  AdminUsername:
    Description: 'User name for the Jenkins admin.'
    Value: admin
    Export:
      Name: !Sub '${AWS::StackName}-AdminUsername'
  DNSName:
    Description: 'The DNS name for the Jenkins Master load balancer.'
    Value: !GetAtt 'MasterELB.DNSName'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  URL:
    Description: 'URL to the Jenkins Master.'
    Value: !Sub 'http://${MasterELB.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-URL'
  MasterIAMRole:
    Description: 'Use this IAm Role to reference API calls from the Jenkins master'
    Value: !GetAtt 'MasterIAMRole.Arn'
    Export:
      Name: !Sub '${AWS::StackName}-MasterIAMRole'
  AgentIAMRole:
    Description: 'Use this IAm Role to reference API calls from the Jenkins agents'
    Value: !GetAtt 'AgentIAMRole.Arn'
    Export:
      Name: !Sub '${AWS::StackName}-AgentIAMRole'
